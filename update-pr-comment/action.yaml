name: PR Commit Message Update
description: Update PR commit message with commit logs

inputs:
  GITHUB_TOKEN:
    description: "GITHUB_TOKEN."
    default: "${{ github.token }}"
    required: false

runs:
  using: "composite"
  steps:
    - name: Set the output
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          // PR description
          const description = pr.body || "";

          // Check if "--- commit logs ---" exists
          const marker = "--- commit logs ---";
          const command = 'git log --format="* %s" origin/${{ github.event.pull_request.base.ref }}..${{ github.event.pull_request.head.sha }} --reverse';
          const { stdout: commitLogs } = await exec.getExecOutput(command);

          let newDescription;
          const markerIndex = description.indexOf(marker);
          if (markerIndex !== -1) {
            // If marker exists, replace everything after it
            newDescription = description.substring(0, markerIndex + marker.length) + "\n" + commitLogs;
          } else {
            // If marker doesn't exist, append it to the description
            newDescription = description + "\n\n" + marker + "\n" + commitLogs;
          }

          // Output the new description
          core.setOutput("new_description", newDescription);

          // Update the PR with the new description
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            body: newDescription
          });
        github-token: ${{ inputs.github_token }}
    - name: Check squash merge settings
      uses: actions/github-script@v7
      with:
        script: |
          const repo = await github.rest.repos.get({
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          const mergeSettings = repo.data;
          const isSquashEnabled = mergeSettings.allow_squash_merge;
          const squashMergeCommitTitle = mergeSettings.squash_merge_commit_title;
          const squashMergeCommitMessage = mergeSettings.squash_merge_commit_message;

          if (isSquashEnabled &&
              squashMergeCommitTitle === 'PR_TITLE' &&
              squashMergeCommitMessage === 'PR_BODY') {
            console.log('Squash merge is enabled and configured correctly.');
          } else {
            throw new Error('Squash merge is not correctly configured.');
          }
